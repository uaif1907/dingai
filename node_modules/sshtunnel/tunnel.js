var argv = require("minimist")(process.argv.slice(2));
var archy = require("archy");
var _ = require("underscore");
var spawn = require("child_process").spawn;
var rc = _.omit(require("rc")("tunnel"), "_");

function archifyConfig() {
    return {
        label: "Services",
        nodes: _.map(rc, function(desc, host) {
            return {
                label: host,
                nodes: _.map(desc.services, function(key, service) {
                    var params = canonicalizeTunnelParams(key);
                    return service + " (" + params.remotePort + ")";
                })
            };
        })
    };
}

function canonicalizeTunnelParams(params) {
    if (_.isNumber(params)) {
        return {
            localPort: params,
            remotePort: params,
            tunnelHost: "localhost"
        };
    } else if (_.isObject(params)) {
        return {
            localPort: params.localPort || params.remotePort,
            remotePort: params.remotePort || params.localPort,
            tunnelHost: params.tunnelHost || "localhost"
        };
    } else {
        throw new Error("Unexpected tunnel params: " + params);
    }
}

var host = argv._[0];
var service = argv._[1];
if ((host in rc) && (service in rc[host].services)) {
    var login = rc[host].login;
    var params = canonicalizeTunnelParams(rc[host].services[service]);
    if (argv["local-port"]) {
        params.localPort = argv["local-port"];
    }
    console.log("Tunneling " + host + "/" + service + " (port " + params.localPort + ")");
    var tunnelspec = params.localPort + ":" + params.tunnelHost + ":" + params.remotePort;
    spawn("ssh", ["-N", "-L", tunnelspec, login]);
} else {
    console.log("Usage: tunnel <host> <service>\n");
    console.log(archy(archifyConfig()));
    process.exit(1);
}
